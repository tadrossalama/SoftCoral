# -*- coding: utf-8 -*-
"""bench.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xrSHlFbMfCFowSBe9BhN-3IPZ3f8WrmJ
"""

!pip install fastbook
import os
from fastbook import *
from fastai.vision.all import *
from fastai.vision.widgets import *
from pathlib import Path

from google.colab import drive
drive.mount('/content/drive')

path= Path('/content/drive/MyDrive/corals')

coral_types = (
    'Acropora Cervicornis',
    'Acropora Palmata',
    'Ctenella chagius',
    'Colpophyllia Natans',
    'Catalaphyllia jardinae',
    'Dendrogyra cylindrus',
    'Diadema Antillarum',
    'Diploria Strigosa',
    'Euphyllia',
    'Elegance'
    'Gorgonians',
    'Heliofungia actiniformis',
    'Millepora Alcicornis',
    'Montastraea Cavernosa',
    'Meandrina Meandrites',
    'Montipora',
    'Palythoas Palythoa',
    'Siderastrea Siderea',
    'Tunicates',
)
path = Path('/content/drive/MyDrive/Colab Notebooks/corals')

add_coral_types2 = (
    'Acanthastrea',
    'Alveopora',
    'Blastomussa',
    'Caulastraea Furcata',
    'Euphyllia Divisa',
    'Porites',
    'Pocillopora meandrina',
    'Hydnophora',
    'Cyphastrea',
    'Seriatopora',
    'Leptoseris',
    'Discosoma',
    'Rhodactis',
    'Ricordea'
)

for o in add_coral_types2:
    dest=(path/o)
    dest.mkdir(exist_ok=True)
    results = search_images_bing(key, f'{o}')
    download_images(dest, urls=results.attrgot('contentUrl'))

! nvidia-smi

!cp '/content/drive/My Drive/corals' 'corals' -r

for o in coral_types:
    dest=(path/o)
    dest.mkdir(exist_ok=True)
    results = search_images_bing(key, f'{o} coral')
    download_images(dest, urls=results.attrgot('contentUrl'))

fns= get_image_files(path)
failed = verify_images(fns)
failed.map(Path.unlink)

for file in os.listdir(path):
    for pic in os.listdir(file):
        if pic.str.split('.').str.get(1) == int:
          print(True)

            #os.remove(os.path.join(wd, file, pic))

count = {}
for dir, folder, file in os.walk(path):
    count[dir] = len(file)


count

path

item_tfms = Resize(256)
batch_tfms = [RandomResizedCrop(224), *aug_transforms(mult=1.0, do_flip=True, max_rotate=30.0, max_zoom=1.5,
                            max_lighting=.8, max_warp=0.3, p_lighting=.9)]

coralstry2 = DataBlock(blocks=(ImageBlock, CategoryBlock),
                  splitter = RandomSplitter(),
                  get_items=get_image_files,
                  get_y=parent_label,
                  item_tfms=item_tfms,
                  batch_tfms=batch_tfms)

dlstry2 = coralstry2.dataloaders(path, bs=32)
dlstry2.show_batch()

from sklearn.model_selection import StratifiedKFold
imgs = get_image_files(path)
random.shuffle(imgs)

lbls = [parent_label(im) for im in imgs]

def get_dls(bs, size, val_idx):
    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),
                   get_items=get_image_files,
                   get_y=parent_label,
                   splitter=IndexSplitter(val_idx),
                   item_tfms = Resize(256),
                   batch_tfms = [RandomResizedCrop(size), 
                                 *aug_transforms(mult=1.0, do_flip=True, 
                                                 max_rotate=30.0, max_zoom=1.5,
                                                  max_lighting=.8, max_warp=0.3, 
                                                 p_lighting=.9),
                                 Normalize.from_stats(*imagenet_stats)])
    return dblock.dataloaders(path, bs=bs)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

corals = DataBlock(blocks = (ImageBlock, CategoryBlock),
                 get_items=get_image_files, 
                 splitter=RandomSplitter(seed=42),
                 get_y=parent_label,    
                 item_tfms=Resize(460),
                 batch_tfms=aug_transforms())

dls= corals.dataloaders(path)
dls.show_batch()

from fastai.callback.fp16 import *
learn3 = cnn_learner(dls, resnet50, metrics=error_rate).to_fp16()
learn3.fine_tune(6, freeze_epochs=3)

interp = ClassificationInterpretation.from_learner(learn3)
interp.plot_confusion_matrix()

interp.plot_top_losses(5, nrows=1)

interp2 = ClassificationInterpretation.from_learner(learn3)
losses,idxs = interp.top_losses()
len(dls.valid_ds)==len(losses)==len(idxs)
interp.plot_confusion_matrix(figsize=(7,7))

learn3.show_results(max_n=16)

upp, low = interp.confusion_matrix()
tn, fp = upp[0], upp[1]
fn, tp = low[0], low[1]

sensitivity = tp/(tp + fn)
sensitivity
specificity = tn/(fp + tn)
specificity

cleaner = ImageClassifierCleaner(learn3)
cleaner

for idx in cleaner.delete(): cleaner.fins[idx].unlike()

ds, idxs = DatasetFormatter().from_similars(learn3)
ImageCleaner(ds, idxs, path, duplicates=True)

learn3.export()
path.ls(file_exts='.pkl')